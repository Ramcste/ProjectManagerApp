

@model ProjectManagerApp.Models.RegisterViewModel

@{
    ViewBag.Title = "UsersEdit";
}

<h2>Edits User Info</h2>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "frmUser" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
 
        <hr />
        @Html.ValidationSummary(false)

        <div class="form-group">
            @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PhoneNumber1, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PhoneNumber1, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PhoneNumber1, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.PhoneNumber2, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PhoneNumber2, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PhoneNumber2, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Password, new { @class = "col-md-2 control-label", id = "password" })
            <div class="col-md-10">
                @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.ConfirmPassword, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </div>


    </div>
}



<script>

    $("#Password").removeAttr("data-val-required")

    $("#UserName,#Email").attr("disabled", "disabled").parent().addClass("state-disabled");

  //  $(function () {

  //      var frmUsers = $('#frmUser').validate({
  //          //Rules for validation
  //          rules: {

  //              Password:{
  //                  required:true
  //              },

  //              ConfrimPassword:{
  //              equalTo:'#Password'
  //              }
  //          },

  //          //messsages for validation
  //          messages: {


  //          Password:{
  //                  required: 'Please enter password'
  //           },

  //          ConfirmPassword:{
  //              equalTo:'Password and confirm password does not match'
  //          }

  //          },

  //          // Do not change code below
  //          errorPlacement: function (error, element) {
  //              error.insertAfter(element.parent());
  //          },
  //          invalidHandler: function (event, validator) {
  //              warnUserForFormPostError();
  //          }


  //      });

  //  });

  //warnUserForFormPostError = function () {

  //      $.SmartMessageBox({
  //          title: "Error",
  //          content: "<b>There are some error(s) in form with red back ground. Please correct them before saving<b>",
  //          buttons: '[Ok]'

  //      }, function (ButtonPressed) {
  //          if (ButtonPressed == "Ok") {

  //          }
  //      });
  //  };





</script>


