@model ProjectManagerApp.Models.RegisterViewModel
@using ProjectManagerApp.Areas.Admin.DAL



@using (Html.BeginForm(null,null,FormMethod.Post,new { id="frmUser"}))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>AspNetUser</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        
        <div class="form-group">
            @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
            </div>
        </div>
        
        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PhoneNumber1, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PhoneNumber1, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PhoneNumber1, "", new { @class = "text-danger" })
            </div>
        </div>

        
        <div class="form-group">
            @Html.LabelFor(model => model.PhoneNumber2, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PhoneNumber2, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PhoneNumber2, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.IsActive, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.DropDownList("isActive", new SelectList(new List<Object> { new { value = "True", text = "True" }, new { value = "False", text = "False" } }, "text", "value"), "All", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
            </div>
        </div>



        <div class="form-group">
            @Html.LabelFor(model => model.IsDeleted, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.IsDeleted, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.DropDownList("isDeleted", new SelectList(new List<Object> {  new { value = "False", text = "False" }, new { value = "True", text = "True" } }, "text", "value"), "All", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.IsDeleted, "", new { @class = "text-danger" })
            </div>
        </div>





        <div class="form-group">
            @Html.LabelFor(m => m.Password, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.ConfirmPassword, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control" })
            </div>
        </div>


        <div class="form-group">
            @Html.Label( "Roles", htmlAttributes: new { @class = "control-label col-md-2" })
          
              <div class="col-md-10">
                @if ((ViewBag.UserRoles as List<NameValuePair>).Count > 0)
                {
                    foreach (var item in ViewBag.UserRoles as List<NameValuePair>)
                    {
                        <div class="col-md-4">
                            <label class="checkbox">
                                <input type="checkbox" name="chkUserRole" class="checkbox style-0 visible-checkbox" value="@item.Id" checked="@item.IsSelected" style="visibility: visible;">
                                <i></i><span>@item.Name</span>
                            </label>
                        </div>
                              
                       
                    }


                }
            </div>

            </div>
            
              
        <div class="form-group">
            @Html.Label("Projects Name", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @if ((ViewBag.ProjectsDeveloper as List<NameValuePair>).Count > 0)
                {
                    foreach (var item in ViewBag.ProjectsDeveloper as List<NameValuePair>)
                    {
                        <div class="col-md-4">
                            <label class="checkbox">
                                <input type="checkbox" name="chkProjectsDeveloper" class="checkbox style-0 visible-checkbox" value="@item.Id" checked="@item.IsSelected" style="visibility: visible;">
                                <i></i><span>@item.Name</span>
                            </label>
                        </div>


                    }

                }



            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    
    
    </div>
}

<script>
    $(function () {

        var frmUsers = $('#frmUser').validate({
            //Rules for validation
            rules: {
                Email: {
                    required: true
                },

                UserName: {
                    required: true
                },

                Address: {
                    required: true
                },

                PhoneNumber: {
                    required: true
                },

                PhoneNumber2: {
                    required: true
                }
               

            },

            //messsages for validation
            messages: {
                Email: {
                    required: 'Please enter valid email address'
                },

                UserName: {
                    required: 'Please enter valid username'
                },

                Address: {
                    required: 'Please enter address'
                },

                PhoneNumber: {
                    required: 'Please enter a valid phonenumber'
                },

                PhoneNumber2: {
                    required: 'Please enter different than first phonenumber'
                }

            },

            // Do not change code below
            errorPlacement: function (error, element) {
                error.insertAfter(element.parent());
            },
            invalidHandler: function (event, validator) {
                warnUserForFormPostError();
            }


        });

    });

    warnUserForFormPostError = function () {

        alert("fill out all the blanks");
        //$.SmartMessageBox({
        //    title: "Error",
        //    content: "<b>There are some error(s) in form with red back ground. Please correct them before saving<b>",
        //    buttons: '[Ok]'

        //}, function (ButtonPressed) {
        //    if (ButtonPressed == "Ok") {

        //    }
        //});
    };



    

</script>


